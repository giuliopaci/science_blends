Task: Modeling of neural systems
Description: Debian Science packages for modeling of neural systems
 This metapackage will install Debian packages which might be useful for
 scientists interested in modeling of real neural systems at different
 levels (from single neuron to complex networks).
 .
 The selection of packages is targeting the application of simulation
 techniques. Methods developers are referred to the
 science-statistics, science-imageanalysis,
 science-numericalcomputation, med-imaging, and med-imaging-dev
 metapackages for a variety of additional software that might be
 useful for neuroscience research.



 ; Added by blends-inject 0.0.2. [now official package]
Depends: python-brian
Published-Authors: Goodman D.F. and Brette R.
Published-DOI: 10.3389/neuro.11.005.2008
Published-In: Front. Neuroinform
Published-Title: Brian: a simulator for spiking neural networks in Python
Published-Year: 2008

 ; Added by blends-inject 0.0.7. [Please note here if modified manually]
Suggests: pynn
Homepage: http://neuralensemble.org/trac/PyNN
Language: Python
WNPP: 604159
Responsible: NeuroDebian Team <team@neuro.debian.net>
License: CeCILL-2
Vcs-Browser: http://git.debian.org/?p=pkg-exppsy/pynn.git
Vcs-Git: git://git.debian.org/git/pkg-exppsy/pynn.git
Pkg-URL: http://neuro.debian.net/pkgs/pynn.html
Pkg-Description: simulator-independent specification of neuronal network models
 PyNN allows to code for a model once and run it without modification
 on any simulator that PyNN supports (currently NEURON, NEST, PCSIM
 and Brian).  PyNN translates standard cell-model names and parameter
 names into simulator-specific names.

 ; Added by blends-inject 0.0.5. [Please note here if modified manually]
Suggests: moose
Homepage: http://moose.sourceforge.net
Language: C++, Python
License: LGPL
Pkg-Description: multiscale simulation environment for neuroscience
 MOOSE is the Multiscale Object-Oriented Simulation Environment. It is the base
 and numerical core for large, detailed simulations including Computational
 Neuroscience and Systems Biology.
 MOOSE spans the range from single molecules to sub-cellular networks, from
 single cells to neuronal networks, and to still larger systems. It is
 backwards-compatible with GENESIS, and forward compatible with Python and
 XML-based model definition standards like SBML and MorphML.
 MOOSE is coordinating with the GENESIS-3 project towards the goals of
 developing educational resources for modeling.

 ; Added by blends-inject 0.0.5. [Please note here if modified manually]
Suggests: pcsim
Homepage: http://www.lsm.tugraz.at/pcsim/
Language: C, Python
WNPP: 605414
License: GPL-3+
Pkg-Description: simulator of heterogeneous networks of neurons and synapses
 PCSIM is a tool for simulating heterogeneous networks composed of
 different model neurons and synapses. This simulator is written in
 C++ with a primary interface to the programming language Python. It
 is intended to simulate networks containing up to millions of neurons
 and on the order of billions of synapses. This is achieved by
 distributing the network over different nodes of a computing cluster
 by using MPI.
Published-Authors: Pecevski D, Natschl√§ger T and Schuch K
Published-DOI: 10.3389/neuro.11.011.2009
Published-In: Front. Neuroinform. 3:11
Published-Title: PCSIM: a parallel simulation environment for neural circuits fully integrated with Python
Published-Year: 2009
Remark: last release is more than 1 year ago, but there is development in newbuild branch

 ; Added by blends-inject 0.0.7. [Please note here if modified manually]
Suggests: nest
Homepage: http://www.nest-initiative.org/index.php/Software:About_NEST
Responsible: Yury V. Zaytsev <yury@shurup.com>
License: non-FOSS
Vcs-Browser: http://git.zaytsev.net/?p=nest-packaging.git;a=summary
Vcs-Git: git://git.zaytsev.net/nest-packaging.git
Pkg-URL: http://git.zaytsev.net/?p=nest-packaging.git;a=summary
Pkg-Description: A simulator for networks of spiking neurons
 NEST is a simulation system for large networks of biologically realistic
 point-neurons and neurons with a small number of electrical compartments.
Published-Authors: Gewaltig M-O and Diesmann M
Published-In: Scholarpedia 2(4):1430
Published-Title: NEST (Neural Simulation Tool)
Published-Year: 2007
Registration: http://www.nest-initiative.org/download/Software:Download.php
Remark: Mentioned packaging is not providing NEST itself but rather only packaging materials so you could build package yourself.

 ; Added by blends-inject 0.0.6. [Please note here if modified manually]
Suggests: invt
Homepage: http://ilab.usc.edu/toolkit/
Language: C++ + Perl, Tcl, Matlab
License: GPL-2+
Pkg-Description: iLab Neuromorphic Vision C++ Toolkit
 The iLab Neuromorphic Vision C++ Toolkit (iNVT, pronounced
 ``invent'') is a comprehensive set of C++ classes for the development
 of neuromorphic models of vision. Neuromorphic models are
 computational neuroscience algorithms whose architecture and function
 is closely inspired from biological brains. The iLab Neuromorphic
 Vision C++ Toolkit comprises not only base classes for images,
 neurons, and brain areas, but also fully-developed models such as our
 model of bottom-up visual attention and of Bayesian surprise.
 .
 Features at a glance:
  * Low-level neural network simulation classes.
  * High-level neuromorphic classes.
  * Neuromorphic models of visual attention.
  * Hardware interfacing
  * Parallel processing classes for the simulation of complex models.
  * Neuromorphic modeling environment.
Registration: http://ilab.usc.edu/cgi-bin/yabb/YaBB.pl?board=;action=register

 ; Added by blends-inject 0.0.7. [Please note here if modified manually]
Suggests: xppaut
Homepage: http://www.math.pitt.edu/~bard/xpp/xpp.html
Responsible: Jakub Nowacki <j.s.nowacki@gmail.com>
License: GPL-2+
Vcs-Git: git://github.com/neurodebian/pkg-xppaut.git
Vcs-browser: https://github.com/neurodebian/pkg-xppaut
Pkg-URL: http://neuro.debian.net/pkgs/xppaut.html
Pkg-Description: Phase Plane Plus Auto: Solves many kinds of equations
 XPPAUT is a tool for solving
    * differential equations,
    * difference equations,
    * delay equations,
    * functional equations,
    * boundary value problems, and
    * stochastic equations.
 .
 The code brings together a number of useful algorithms and is
 extremely portable. All the graphics and interface are written
 completely in Xlib which explains the somewhat idiosyncratic and
 primitive widgets interface.
